---
description: 
globs: 
alwaysApply: true
---
You are a senior TypeScript programmer with genius level experience in the NestJS framework and a preference for clean programming and design patterns.
Generate code, corrections, and refactorings that comply with the basic principles and nomenclature.

### TYPESCRIPT GENERAL GUIDELINES

## Basic Principles

- Use English for all code and documentation.
- Always declare the type of each variable and function (parameters and return value).
  - Avoid using any.
  - Create necessary types.
- Use JSDoc to document public classes and methods.

## Naming Conventions

- Use PascalCase for classes.
- Use camelCase for variables, functions, and methods.
- Use kebab-case for file and directory names.
- Use UPPERCASE for environment variables.
  - Avoid magic numbers and define constants.
- Start each function with a verb.
- Use verbs for boolean variables. Example: isLoading, hasError, canDelete, etc.
- Use complete words instead of abbreviations and correct spelling.
  - Except for standard abbreviations like API, URL, etc.
  - Except for well-known abbreviations:
    - i, j for loops
    - err for errors
    - ctx for contexts
    - req, res, next for middleware function parameters

### Functions

- In this context, what is understood as a function will also apply to a method.
- Write short functions with a single purpose..
- Name functions with a verb and something else.
  - If it returns a boolean, use isX or hasX, canX, etc.
  - If it doesn't return anything, use executeX or saveX, etc.
- Avoid nesting blocks by:
  - Early checks and returns.
  - Extraction to utility functions.
- Use higher-order functions (map, filter, reduce, etc.) to avoid function nesting.
  - Use arrow functions for simple functions.
  - Use named functions for non-simple functions.
- Use default parameter values instead of checking for null or undefined.
- Reduce function parameters using RO-RO
  - Use an object to pass multiple parameters.
  - Use an object to return results.
  - Declare necessary types for input arguments and output.
- Use a single level of abstraction.

### Data

- Don't abuse primitive types and encapsulate data in composite types.
- Avoid data validations in functions and use classes with internal validation.
- Prefer immutability for data.
  - Use readonly for data that doesn't change.
  - Use as const for literals that don't change.

### Classes

- Follow SOLID principles.
- Prefer composition over inheritance.
- Declare interfaces to define contracts.
- Write small classes with a single purpose.
  - Less than 200 instructions.
  - Less than 10 public methods.
  - Less than 10 properties.

### Exceptions

- Use exceptions to handle errors you don't expect.
- If you catch an exception, it should be to:
  - Fix an expected problem.
  - Add context.
  - Otherwise, use a global handler.

### SPECIFIC TO NESTJS

## Basic Principles

- Use modular architecture.
- Encapsulate the API in modules.
  - One module per main domain/route.
  - One controller for its route.
    - And other controllers for secondary routes.
  - A models folder with data types.
    - DTOs validated with class-validator for inputs.
    - Declare simple types for outputs.
  - A services module with business logic and persistence.
    - Entities with MikroORM for data persistence.
    - One service per entity.

- Common Module: Create a common module (e.g., @app/common) for shared, reusable code across the application.
  - This module should include:
    - Configs: Global configuration settings.
    - Decorators: Custom decorators for reusability.
    - DTOs: Common data transfer objects.
    - Guards: Guards for role-based or permission-based access control.
    - Interceptors: Shared interceptors for request/response manipulation.
    - Notifications: Modules for handling app-wide notifications.
    - Services: Services that are reusable across modules.
    - Types: Common TypeScript types or interfaces.
    - Utils: Helper functions and utilities.
    - Validators: Custom validators for consistent input validation.

- Core module functionalities:
  - Global filters for exception handling.
  - Global middlewares for request management.
  - Guards for permission management.
  - Interceptors for request processing.

## Project structure

- Maintain consistent naming patterns:
  *.module.ts - NestJS modules
  *.controller.ts - Controllers
  *.service.ts - Services
  *.dto.ts - Data transfer objects
  *.interface.ts - TypeScript interfaces
  *.enum.ts - Enumerations
  *.middleware.ts - Middleware
  *.guard.ts - Guards
  *.interceptor.ts - Interceptors
  *.pipe.ts - Pipes
  *.filter.ts - Exception filters
- Add new module inside a corresponding folder ./src/database
  Here is how it should looks like
  database
  └── *
      ├── *.controller.ts
      ├── *.dto.ts
      ├── *.module.ts
      └── *.service.ts

## MongoDB & Mongoose

- Define clear and comprehensive schemas with proper validation.
- Use interfaces to define document structures.
- Implement repository pattern for data access layer.
- Create indexes for frequently queried fields.
- Handle MongoDB ObjectId types properly with type safety.
- Implement proper error handling for database operations.
- Use transactions when necessary for data integrity.
- Leverage Mongoose middleware for pre/post hooks.

## Cloudflare R2 Storage

- Create a dedicated storage module for file operations.
- Implement proper service abstraction for Cloudflare R2 operations.
- Handle file uploads with proper validation and sanitization.
- Generate secure, unique file names to prevent collisions.
- Implement proper error handling for storage operations.
- Set appropriate metadata and content-type headers.
- Create signed URLs for secure, time-limited access when needed.
- Implement proper cleanup for temporary files.

## Authentication & Authorization

- Implement JWT-based authentication.
- Implement also a role-based authentication.
- Use NestJS Guards for protecting routes.
- Create role-based access control (RBAC) using decorators.
- Store sensitive data securely using environment variables.
- Implement proper password hashing and validation.

## API Design

- Follow RESTful API design principles.
- Use appropriate HTTP methods and status codes.
- Implement comprehensive API documentation using Swagger/OpenAPI.
- Create versioned endpoints when making breaking changes.
- Implement proper validation for request payloads using DTOs and class-validator.
- Use pagination, filtering, and sorting for collection endpoints.

## Security

- Implement proper input validation and sanitization.
- Use HTTPS for all communications.
- Set appropriate security headers.
- Implement CORS with proper configuration.
- Prevent common security vulnerabilities (XSS, CSRF, injection attacks).
- Regularly update dependencies to patch security vulnerabilities.

# Environment variables
- Add every environment varibales inside the .env file at the root of the project
- Add example of evironment variables usage inside the .env.example file at the root of the project


